/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type DelegationAddressProposed = ContractEventLog<{
  voter: string;
  delegationAddress: string;
  0: string;
  1: string;
}>;
export type DelegationAddressRegistrationConfirmed = ContractEventLog<{
  voter: string;
  delegationAddress: string;
  0: string;
  1: string;
}>;
export type GovernanceCallTimelocked = ContractEventLog<{
  selector: string;
  allowedAfterTimestamp: string;
  encodedCall: string;
  0: string;
  1: string;
  2: string;
}>;
export type GovernanceInitialised = ContractEventLog<{
  initialGovernance: string;
  0: string;
}>;
export type GovernedProductionModeEntered = ContractEventLog<{
  governanceSettings: string;
  0: string;
}>;
export type MaxNodeIdsPerEntitySet = ContractEventLog<{
  maxNodeIdsPerEntity: string;
  0: string;
}>;
export type NodeIdRegistered = ContractEventLog<{
  voter: string;
  nodeId: string;
  0: string;
  1: string;
}>;
export type NodeIdUnregistered = ContractEventLog<{
  voter: string;
  nodeId: string;
  0: string;
  1: string;
}>;
export type PublicKeyRegistered = ContractEventLog<{
  voter: string;
  part1: string;
  part2: string;
  0: string;
  1: string;
  2: string;
}>;
export type PublicKeyUnregistered = ContractEventLog<{
  voter: string;
  part1: string;
  part2: string;
  0: string;
  1: string;
  2: string;
}>;
export type SigningPolicyAddressProposed = ContractEventLog<{
  voter: string;
  signingPolicyAddress: string;
  0: string;
  1: string;
}>;
export type SigningPolicyAddressRegistrationConfirmed = ContractEventLog<{
  voter: string;
  signingPolicyAddress: string;
  0: string;
  1: string;
}>;
export type SubmitAddressProposed = ContractEventLog<{
  voter: string;
  submitAddress: string;
  0: string;
  1: string;
}>;
export type SubmitAddressRegistrationConfirmed = ContractEventLog<{
  voter: string;
  submitAddress: string;
  0: string;
  1: string;
}>;
export type SubmitSignaturesAddressProposed = ContractEventLog<{
  voter: string;
  submitSignaturesAddress: string;
  0: string;
  1: string;
}>;
export type SubmitSignaturesAddressRegistrationConfirmed = ContractEventLog<{
  voter: string;
  submitSignaturesAddress: string;
  0: string;
  1: string;
}>;
export type TimelockedGovernanceCallCanceled = ContractEventLog<{
  selector: string;
  timestamp: string;
  0: string;
  1: string;
}>;
export type TimelockedGovernanceCallExecuted = ContractEventLog<{
  selector: string;
  timestamp: string;
  0: string;
  1: string;
}>;

export interface EntityManager extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): EntityManager;
  clone(): EntityManager;
  methods: {
    cancelGovernanceCall(
      _selector: string | number[]
    ): NonPayableTransactionObject<void>;

    confirmDelegationAddressRegistration(
      _voter: string
    ): NonPayableTransactionObject<void>;

    confirmSigningPolicyAddressRegistration(
      _voter: string
    ): NonPayableTransactionObject<void>;

    confirmSubmitAddressRegistration(
      _voter: string
    ): NonPayableTransactionObject<void>;

    confirmSubmitSignaturesAddressRegistration(
      _voter: string
    ): NonPayableTransactionObject<void>;

    executeGovernanceCall(
      _selector: string | number[]
    ): NonPayableTransactionObject<void>;

    getDelegationAddressOf(_voter: string): NonPayableTransactionObject<string>;

    getDelegationAddressOfAt(
      _voter: string,
      _blockNumber: number | string | BN
    ): NonPayableTransactionObject<string>;

    getDelegationAddresses(
      _voters: string[],
      _blockNumber: number | string | BN
    ): NonPayableTransactionObject<string[]>;

    getNodeIds(
      _voters: string[],
      _blockNumber: number | string | BN
    ): NonPayableTransactionObject<string[][]>;

    getNodeIdsOf(_voter: string): NonPayableTransactionObject<string[]>;

    getNodeIdsOfAt(
      _voter: string,
      _blockNumber: number | string | BN
    ): NonPayableTransactionObject<string[]>;

    getPublicKeyOf(_voter: string): NonPayableTransactionObject<{
      0: string;
      1: string;
    }>;

    getPublicKeyOfAt(
      _voter: string,
      _blockNumber: number | string | BN
    ): NonPayableTransactionObject<{
      0: string;
      1: string;
    }>;

    getPublicKeys(
      _voters: string[],
      _blockNumber: number | string | BN
    ): NonPayableTransactionObject<{
      _parts1: string[];
      _parts2: string[];
      0: string[];
      1: string[];
    }>;

    getSigningPolicyAddresses(
      _voters: string[],
      _blockNumber: number | string | BN
    ): NonPayableTransactionObject<string[]>;

    getSubmitAddresses(
      _voters: string[],
      _blockNumber: number | string | BN
    ): NonPayableTransactionObject<string[]>;

    getSubmitSignaturesAddresses(
      _voters: string[],
      _blockNumber: number | string | BN
    ): NonPayableTransactionObject<string[]>;

    getVoterAddresses(
      _voter: string
    ): NonPayableTransactionObject<[string, string, string]>;

    getVoterAddressesAt(
      _voter: string,
      _blockNumber: number | string | BN
    ): NonPayableTransactionObject<[string, string, string]>;

    getVoterForDelegationAddress(
      _delegationAddress: string,
      _blockNumber: number | string | BN
    ): NonPayableTransactionObject<string>;

    getVoterForNodeId(
      _nodeId: string | number[],
      _blockNumber: number | string | BN
    ): NonPayableTransactionObject<string>;

    getVoterForPublicKey(
      _part1: string | number[],
      _part2: string | number[],
      _blockNumber: number | string | BN
    ): NonPayableTransactionObject<string>;

    getVoterForSigningPolicyAddress(
      _signingPolicyAddress: string,
      _blockNumber: number | string | BN
    ): NonPayableTransactionObject<string>;

    getVoterForSubmitAddress(
      _submitAddress: string,
      _blockNumber: number | string | BN
    ): NonPayableTransactionObject<string>;

    getVoterForSubmitSignaturesAddress(
      _submitSignaturesAddress: string,
      _blockNumber: number | string | BN
    ): NonPayableTransactionObject<string>;

    governance(): NonPayableTransactionObject<string>;

    governanceSettings(): NonPayableTransactionObject<string>;

    initialise(
      _governanceSettings: string,
      _initialGovernance: string
    ): NonPayableTransactionObject<void>;

    isExecutor(_address: string): NonPayableTransactionObject<boolean>;

    maxNodeIdsPerEntity(): NonPayableTransactionObject<string>;

    nodePossessionVerifier(): NonPayableTransactionObject<string>;

    productionMode(): NonPayableTransactionObject<boolean>;

    proposeDelegationAddress(
      _delegationAddress: string
    ): NonPayableTransactionObject<void>;

    proposeSigningPolicyAddress(
      _signingPolicyAddress: string
    ): NonPayableTransactionObject<void>;

    proposeSubmitAddress(
      _submitAddress: string
    ): NonPayableTransactionObject<void>;

    proposeSubmitSignaturesAddress(
      _submitSignaturesAddress: string
    ): NonPayableTransactionObject<void>;

    publicKeyVerifier(): NonPayableTransactionObject<string>;

    registerNodeId(
      _nodeId: string | number[],
      _certificateRaw: string | number[],
      _signature: string | number[]
    ): NonPayableTransactionObject<void>;

    registerPublicKey(
      _part1: string | number[],
      _part2: string | number[],
      _verificationData: string | number[]
    ): NonPayableTransactionObject<void>;

    setInitialVoterData(
      _data: [string, string, (string | number[])[]][]
    ): NonPayableTransactionObject<void>;

    setMaxNodeIdsPerEntity(
      _newMaxNodeIdsPerEntity: number | string | BN
    ): NonPayableTransactionObject<void>;

    setNodePossessionVerifier(
      _nodePossessionVerifier: string
    ): NonPayableTransactionObject<void>;

    setPublicKeyVerifier(
      _publicKeyVerifier: string
    ): NonPayableTransactionObject<void>;

    switchToProductionMode(): NonPayableTransactionObject<void>;

    timelockedCalls(selector: string | number[]): NonPayableTransactionObject<{
      allowedAfterTimestamp: string;
      encodedCall: string;
      0: string;
      1: string;
    }>;

    unregisterNodeId(
      _nodeId: string | number[]
    ): NonPayableTransactionObject<void>;

    unregisterPublicKey(): NonPayableTransactionObject<void>;
  };
  events: {
    DelegationAddressProposed(
      cb?: Callback<DelegationAddressProposed>
    ): EventEmitter;
    DelegationAddressProposed(
      options?: EventOptions,
      cb?: Callback<DelegationAddressProposed>
    ): EventEmitter;

    DelegationAddressRegistrationConfirmed(
      cb?: Callback<DelegationAddressRegistrationConfirmed>
    ): EventEmitter;
    DelegationAddressRegistrationConfirmed(
      options?: EventOptions,
      cb?: Callback<DelegationAddressRegistrationConfirmed>
    ): EventEmitter;

    GovernanceCallTimelocked(
      cb?: Callback<GovernanceCallTimelocked>
    ): EventEmitter;
    GovernanceCallTimelocked(
      options?: EventOptions,
      cb?: Callback<GovernanceCallTimelocked>
    ): EventEmitter;

    GovernanceInitialised(cb?: Callback<GovernanceInitialised>): EventEmitter;
    GovernanceInitialised(
      options?: EventOptions,
      cb?: Callback<GovernanceInitialised>
    ): EventEmitter;

    GovernedProductionModeEntered(
      cb?: Callback<GovernedProductionModeEntered>
    ): EventEmitter;
    GovernedProductionModeEntered(
      options?: EventOptions,
      cb?: Callback<GovernedProductionModeEntered>
    ): EventEmitter;

    MaxNodeIdsPerEntitySet(cb?: Callback<MaxNodeIdsPerEntitySet>): EventEmitter;
    MaxNodeIdsPerEntitySet(
      options?: EventOptions,
      cb?: Callback<MaxNodeIdsPerEntitySet>
    ): EventEmitter;

    NodeIdRegistered(cb?: Callback<NodeIdRegistered>): EventEmitter;
    NodeIdRegistered(
      options?: EventOptions,
      cb?: Callback<NodeIdRegistered>
    ): EventEmitter;

    NodeIdUnregistered(cb?: Callback<NodeIdUnregistered>): EventEmitter;
    NodeIdUnregistered(
      options?: EventOptions,
      cb?: Callback<NodeIdUnregistered>
    ): EventEmitter;

    PublicKeyRegistered(cb?: Callback<PublicKeyRegistered>): EventEmitter;
    PublicKeyRegistered(
      options?: EventOptions,
      cb?: Callback<PublicKeyRegistered>
    ): EventEmitter;

    PublicKeyUnregistered(cb?: Callback<PublicKeyUnregistered>): EventEmitter;
    PublicKeyUnregistered(
      options?: EventOptions,
      cb?: Callback<PublicKeyUnregistered>
    ): EventEmitter;

    SigningPolicyAddressProposed(
      cb?: Callback<SigningPolicyAddressProposed>
    ): EventEmitter;
    SigningPolicyAddressProposed(
      options?: EventOptions,
      cb?: Callback<SigningPolicyAddressProposed>
    ): EventEmitter;

    SigningPolicyAddressRegistrationConfirmed(
      cb?: Callback<SigningPolicyAddressRegistrationConfirmed>
    ): EventEmitter;
    SigningPolicyAddressRegistrationConfirmed(
      options?: EventOptions,
      cb?: Callback<SigningPolicyAddressRegistrationConfirmed>
    ): EventEmitter;

    SubmitAddressProposed(cb?: Callback<SubmitAddressProposed>): EventEmitter;
    SubmitAddressProposed(
      options?: EventOptions,
      cb?: Callback<SubmitAddressProposed>
    ): EventEmitter;

    SubmitAddressRegistrationConfirmed(
      cb?: Callback<SubmitAddressRegistrationConfirmed>
    ): EventEmitter;
    SubmitAddressRegistrationConfirmed(
      options?: EventOptions,
      cb?: Callback<SubmitAddressRegistrationConfirmed>
    ): EventEmitter;

    SubmitSignaturesAddressProposed(
      cb?: Callback<SubmitSignaturesAddressProposed>
    ): EventEmitter;
    SubmitSignaturesAddressProposed(
      options?: EventOptions,
      cb?: Callback<SubmitSignaturesAddressProposed>
    ): EventEmitter;

    SubmitSignaturesAddressRegistrationConfirmed(
      cb?: Callback<SubmitSignaturesAddressRegistrationConfirmed>
    ): EventEmitter;
    SubmitSignaturesAddressRegistrationConfirmed(
      options?: EventOptions,
      cb?: Callback<SubmitSignaturesAddressRegistrationConfirmed>
    ): EventEmitter;

    TimelockedGovernanceCallCanceled(
      cb?: Callback<TimelockedGovernanceCallCanceled>
    ): EventEmitter;
    TimelockedGovernanceCallCanceled(
      options?: EventOptions,
      cb?: Callback<TimelockedGovernanceCallCanceled>
    ): EventEmitter;

    TimelockedGovernanceCallExecuted(
      cb?: Callback<TimelockedGovernanceCallExecuted>
    ): EventEmitter;
    TimelockedGovernanceCallExecuted(
      options?: EventOptions,
      cb?: Callback<TimelockedGovernanceCallExecuted>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(
    event: "DelegationAddressProposed",
    cb: Callback<DelegationAddressProposed>
  ): void;
  once(
    event: "DelegationAddressProposed",
    options: EventOptions,
    cb: Callback<DelegationAddressProposed>
  ): void;

  once(
    event: "DelegationAddressRegistrationConfirmed",
    cb: Callback<DelegationAddressRegistrationConfirmed>
  ): void;
  once(
    event: "DelegationAddressRegistrationConfirmed",
    options: EventOptions,
    cb: Callback<DelegationAddressRegistrationConfirmed>
  ): void;

  once(
    event: "GovernanceCallTimelocked",
    cb: Callback<GovernanceCallTimelocked>
  ): void;
  once(
    event: "GovernanceCallTimelocked",
    options: EventOptions,
    cb: Callback<GovernanceCallTimelocked>
  ): void;

  once(
    event: "GovernanceInitialised",
    cb: Callback<GovernanceInitialised>
  ): void;
  once(
    event: "GovernanceInitialised",
    options: EventOptions,
    cb: Callback<GovernanceInitialised>
  ): void;

  once(
    event: "GovernedProductionModeEntered",
    cb: Callback<GovernedProductionModeEntered>
  ): void;
  once(
    event: "GovernedProductionModeEntered",
    options: EventOptions,
    cb: Callback<GovernedProductionModeEntered>
  ): void;

  once(
    event: "MaxNodeIdsPerEntitySet",
    cb: Callback<MaxNodeIdsPerEntitySet>
  ): void;
  once(
    event: "MaxNodeIdsPerEntitySet",
    options: EventOptions,
    cb: Callback<MaxNodeIdsPerEntitySet>
  ): void;

  once(event: "NodeIdRegistered", cb: Callback<NodeIdRegistered>): void;
  once(
    event: "NodeIdRegistered",
    options: EventOptions,
    cb: Callback<NodeIdRegistered>
  ): void;

  once(event: "NodeIdUnregistered", cb: Callback<NodeIdUnregistered>): void;
  once(
    event: "NodeIdUnregistered",
    options: EventOptions,
    cb: Callback<NodeIdUnregistered>
  ): void;

  once(event: "PublicKeyRegistered", cb: Callback<PublicKeyRegistered>): void;
  once(
    event: "PublicKeyRegistered",
    options: EventOptions,
    cb: Callback<PublicKeyRegistered>
  ): void;

  once(
    event: "PublicKeyUnregistered",
    cb: Callback<PublicKeyUnregistered>
  ): void;
  once(
    event: "PublicKeyUnregistered",
    options: EventOptions,
    cb: Callback<PublicKeyUnregistered>
  ): void;

  once(
    event: "SigningPolicyAddressProposed",
    cb: Callback<SigningPolicyAddressProposed>
  ): void;
  once(
    event: "SigningPolicyAddressProposed",
    options: EventOptions,
    cb: Callback<SigningPolicyAddressProposed>
  ): void;

  once(
    event: "SigningPolicyAddressRegistrationConfirmed",
    cb: Callback<SigningPolicyAddressRegistrationConfirmed>
  ): void;
  once(
    event: "SigningPolicyAddressRegistrationConfirmed",
    options: EventOptions,
    cb: Callback<SigningPolicyAddressRegistrationConfirmed>
  ): void;

  once(
    event: "SubmitAddressProposed",
    cb: Callback<SubmitAddressProposed>
  ): void;
  once(
    event: "SubmitAddressProposed",
    options: EventOptions,
    cb: Callback<SubmitAddressProposed>
  ): void;

  once(
    event: "SubmitAddressRegistrationConfirmed",
    cb: Callback<SubmitAddressRegistrationConfirmed>
  ): void;
  once(
    event: "SubmitAddressRegistrationConfirmed",
    options: EventOptions,
    cb: Callback<SubmitAddressRegistrationConfirmed>
  ): void;

  once(
    event: "SubmitSignaturesAddressProposed",
    cb: Callback<SubmitSignaturesAddressProposed>
  ): void;
  once(
    event: "SubmitSignaturesAddressProposed",
    options: EventOptions,
    cb: Callback<SubmitSignaturesAddressProposed>
  ): void;

  once(
    event: "SubmitSignaturesAddressRegistrationConfirmed",
    cb: Callback<SubmitSignaturesAddressRegistrationConfirmed>
  ): void;
  once(
    event: "SubmitSignaturesAddressRegistrationConfirmed",
    options: EventOptions,
    cb: Callback<SubmitSignaturesAddressRegistrationConfirmed>
  ): void;

  once(
    event: "TimelockedGovernanceCallCanceled",
    cb: Callback<TimelockedGovernanceCallCanceled>
  ): void;
  once(
    event: "TimelockedGovernanceCallCanceled",
    options: EventOptions,
    cb: Callback<TimelockedGovernanceCallCanceled>
  ): void;

  once(
    event: "TimelockedGovernanceCallExecuted",
    cb: Callback<TimelockedGovernanceCallExecuted>
  ): void;
  once(
    event: "TimelockedGovernanceCallExecuted",
    options: EventOptions,
    cb: Callback<TimelockedGovernanceCallExecuted>
  ): void;
}
